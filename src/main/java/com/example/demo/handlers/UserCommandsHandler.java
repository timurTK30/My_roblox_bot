package com.example.demo.handlers;

import com.example.demo.domain.*;
import com.example.demo.dto.GameDto;
import com.example.demo.dto.SuportMassageDto;
import com.example.demo.dto.UserDto;
import com.example.demo.mapper.GameMapper;
import com.example.demo.mapper.UserMapper;
import com.example.demo.service.GameService;
import com.example.demo.service.QuestService;
import com.example.demo.service.SupportMassageService;
import com.example.demo.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.time.LocalDate;
import java.time.Period;
import java.util.*;
import java.util.stream.Collectors;

import static com.example.demo.domain.Commands.*;
import static com.example.demo.domain.UserStatus.WANT_UPDATE_MSG;

@Component
@Slf4j
@RequiredArgsConstructor
public class UserCommandsHandler {
    
    private final QuestService questService;
    private final GameService gameService;
    private final GameMapper gameMapper;
    private final UserService userService;
    private final UserMapper userMapper;
    private final SupportMassageService supportMassageService;
    private final UtilCommandsHandler util;

    private void handleIncomingMessage(Message message) {
        String text = message.getText();
        Long chatId = message.getChatId();

        if (text.startsWith(START.getCmd())) {
            wellcome(chatId);
        } else if (text.startsWith(HELP.getCmd())) {
            help(chatId);
        } else if (text.equalsIgnoreCase(GAMES.getCmd())) {
            handleGameCommand(chatId);
        } else if (text.startsWith(GAME.getCmd())) {
            Long gameId = Long.valueOf(text.replaceAll("\\D+", ""));
            getGameById(chatId, gameId);
        } else if (text.startsWith(BUY_SUBSCRIBE.getCmd())) {
            subscription(chatId);
        } else if (text.startsWith(PROFILE.getCmd())) {
            getProfile(chatId);
        } else if (text.startsWith(MENU.getCmd())) {
            menuForUser(chatId);
        } else if (text.startsWith(QUEST_BY_ID.getCmd())) {
            Long id = Long.valueOf(text.replaceAll("/quest", ""));
            Optional<Quest> questById = questService.getQuestById(id);
            util.outputQuestWithCustomBtn(chatId, questById.get(), List.of("–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç"));
        } else {
            handleUserMessage(chatId, text);
        }

    }

    public void wellcome(Long chatId) {
        String text = "–ü—Ä–∏–≤–µ—Ç! \uD83D\uDE0A <b>–Ø –±–æ—Ç –ø–æ –∏–≥—Ä–µ Roblox.</b> \n" +
                "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ. \n" +
                "\n" +
                "–û—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –¥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π - <i>—è –∑–Ω–∞—é –≤—Å—ë!</i> –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ! \uD83C\uDFAE‚ú®\n" +
                "\n" +
                "–ê –µ—â—ë —è –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—é —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤. \n" +
                "\n" +
                "–¢–∞–∫ —á—Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —Å–ø—Ä–∞—à–∏–≤–∞–π –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!";
        util.sendMessageToUser(chatId, text, List.of("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ\uD83D\uDC7E"), 1);

    }

    private void help(Long chatId) {
        util.sendMessageToUser(chatId, "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", List.of("–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"), 1);
    }

    private void handleGameCommand(Long chatId) {
        GameGenre[] gameGenres = GameGenre.values();
        List<String> buttons = Arrays.stream(gameGenres)
                .map(Enum::toString)
                .collect(Collectors.toList());
        buttons.add("ALL");
        util.sendMessageToUser(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", buttons, buttons.size() / 2);
    }

    private void getGameById(Long chatId, Long gameId) {
        StringBuilder stringBuilder = new StringBuilder();
        String tempCreatorId = "–ø—É—Å—Ç–æ";
        Optional<GameDto> gameByGameId = gameService.getGameByGameId(gameId);
        gameByGameId.ifPresent(gameDto -> {
            util.showAllDescription(stringBuilder, gameDto, tempCreatorId);
            if (gameDto.getGif() != null && !gameDto.getGif().isEmpty()) {
                util.sendGifToUser(chatId, gameDto.getGif(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            } else {
                util.sendPhotoToUser(chatId, gameDto.getPhoto(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            }

        });
    }

    public void subscription(Long chatId) {
        String msg = "\uD83D\uDCE2 –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–µ–º –±–æ—Ç–µ! \uD83C\uDF89\n" +
                "\n" +
                "‚ú® –ü—Ä–µ–º–∏—É–º 5z≈Ç ‚Äî –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! \uD83D\uDC8E\n" +
                "\n" +
                "\uD83D\uDC51 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 10z≈Ç ‚Äî –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. \uD83D\uDD27\n" +
                "\n" +
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! \uD83D\uDE80";
        util.sendMessageToUser(chatId, msg, List.of("–ö—É–ø–∏—Ç—å: –ü—Ä–µ–º–∏—É–º‚ú®", "–ö—É–ø–∏—Ç—å: –ê–¥–º–∏–Ω\uD83D\uDC51"), 2);
    }

    private void getProfile(Long chatId) {
        UserDto userByChatId = userService.getUserByChatId(chatId);
        Quest quest = userByChatId.getExecutiveQuest();
        Game game = userByChatId.getGame();
        StringBuilder information = new StringBuilder();
        information.append("üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n")
                .append("üìõ <b>–ò–º—è:</b> ").append(userByChatId.getNickname()).append("\n")
                .append("üíº <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ").append(userByChatId.getRole()).append("\n\n");

        if (game != null) {
            information.append("üéÆ <b>–ò–≥—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å –∫–µ–º-—Ç–æ:</b> \n")
                    .append(game.getName()).append(" [–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É](/game").append(game.getId()).append(")\n\n");
        }

        information.append("üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ").append(userByChatId.getDateOfRegisterAcc()).append("\n")
                .append("‚è≥ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</b> ")
                .append(Period.between(userByChatId.getDateOfRegisterAcc(), LocalDate.now()).getDays()).append(" –¥–Ω–µ–π\n\n")
                .append("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:</b> \n")
                .append("    ‚Ä¢ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º, —Ç–∞–∫–∏–º –∫–∞–∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.\n")
                .append("    ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n")
                .append("    ‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!\n\n")
                .append("<b>–ü—Ä–∏–Ω—è—Ç—ã–π –∫–≤–µ—Å—Ç:</b>\n")
                .append(quest.getGame().getName())
                .append("(/quest").append(quest.getId()).append(" )")
                .append("\n\n")
                .append("üí¨ <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: /help");

        util.sendMessageToUser(chatId, information.toString());
    }

    private void menuForUser(Long chatId) {
        List<String> commandsList = Arrays.stream(values()).toList().stream().filter(cmd -> !cmd.isCmdAdmin() && cmd.isNeedToShow()).map(Commands::getCmdName).toList();
        util.sendMessageToUser(chatId, "<b>\uD83C\uDFAE Roblox –ë–æ—Ç ‚Äî –í–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ Roblox!</b>\n" +
                        "\n" +
                        "\uD83D\uDC4B –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–≥—Ä—ã –≤ Roblox. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:",
                commandsList, commandsList.size() / 2);

    }

    public void register(Long chatId, CallbackQuery callbackQuery) {
        if (util.isUserExist(chatId)) {
            util.editMsg(chatId, callbackQuery.getMessage().getMessageId(), "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ\n" +
                    "\n" +
                    "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help \uD83C\uDD98\n" +
                    "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /games \uD83C\uDFAE");
            return;
        }
        var queryFrom = callbackQuery.getFrom();
        String nickname = !queryFrom.getUserName().isEmpty() ? queryFrom.getUserName() : queryFrom.getFirstName();

        User user = new User();
        user.setNickname(nickname);
        user.setChatId(chatId);
        user.setRole(Role.USER);
        user.setStatus(UserStatus.DONT_SENT);
        user.setAStatus(AdminStatus.DONT_WRITE);
        user.setTempChatIdForReply(0L);
        user.setDateOfRegisterAcc(LocalDate.now());
        userService.save(userMapper.toDto(user));
        util.editMsg(chatId, callbackQuery.getMessage().getMessageId(), "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ\n" +
                "\n" +
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help \uD83C\uDD98\n" +
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /games \uD83C\uDFAE");
    }

    private void handleGameApplication(Long chatId, String data) {
        String gameName = data.replaceAll("[^A-Za-z ]", "").trim();
        GameDto gameDto = gameService.getGameByName(gameName);
        UserDto userDto = userService.getUserByChatId(chatId);
        userDto.setGame(gameMapper.toEntity(gameDto));
        userService.updateByChatId(userDto, chatId);
    }

    private void showFriends(Long chatId, String data) {
        String gameName = data.replaceAll("[^A-Za-z ]", "").trim();
        GameDto gameByName = gameService.getGameByName(gameName);
        List<UserDto> friends = userService.getUserByGameId(gameByName.getId()).stream()
                .filter(user -> !user.getChatId().equals(chatId))
                .toList();
        if (!friends.isEmpty()) {
            util.sendMessageToUser(chatId, "@" + friends.get(0).getNickname());
            System.out.println(friends);
        } else {
            util.sendMessageToUser(chatId, "–ù–µ—Ç –¥—Ä—É–∑–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –≤ —ç—Ç—É –∏–≥—Ä—É");
        }
    }

    private void handleUserMessage(Long chatId, String message) {
        try {
            UserDto user = userService.getUserByChatId(chatId);
            if (user.getStatus().equalsIgnoreCase(UserStatus.WAIT_FOR_SENT.name())) {
                if (saveSuppMassageFromUser(chatId, message)) {
                    util.sendMessageToUser(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                    userService.updateStatusByChatId(chatId, UserStatus.WAIT_FOR_REPLY.name());
                } else {
                    util.sendMessageToUser(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ–ø–æ–ª–∞–¥–∫–∏");
                }
            } else if (user.getStatus().equalsIgnoreCase(WANT_UPDATE_MSG.name())) {
                saveSuppMassageFromUser(chatId, message);
                util.sendMessageToUser(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                userService.updateStatusByChatId(chatId, UserStatus.WAIT_FOR_REPLY.name());
            }
        } catch (Exception e) {
            System.out.println("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π");
        }
    }

    private void handlePositiveFeedback(Long chatId) {
        supportMassageService.deleteByChatId(chatId);
        userService.updateStatusByChatId(chatId, "DONT_SENT");
    }

    private void handleNegativeFeedback(Long chatId, CallbackQuery callbackQuery) {
        SuportMassageDto supportMessage = supportMassageService.getMassageByChatId(chatId).orElse(null);
        if (supportMessage != null) {
            String message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @" + callbackQuery.getFrom().getUserName() +
                    " –Ω–µ –æ–¥–æ–±—Ä–∏–ª –ø–æ–º–æ—â—å\n\n" + supportMessage.getMassage();
            util.sendMessageToUser(1622241974L, message);
        }
    }

    public boolean saveSuppMassageFromUser(Long chatId, String massage) {
        try {
            Optional<SuportMassageDto> massageByChatId = supportMassageService.getMassageByChatId(chatId);
            if (massageByChatId.isEmpty()) {
                SuportMassageDto suportMassageDto = new SuportMassageDto();
                suportMassageDto.setChatId(chatId);
                suportMassageDto.setMassage(massage);
                suportMassageDto.setDate(new Date());
                supportMassageService.save(suportMassageDto);
            } else {
                SuportMassageDto massageDto = massageByChatId.get();
                massageDto.setMassage(massage);
                massageDto.setDate(new Date());
                supportMassageService.updateByChatId(massageDto, chatId);
            }
            return true;

        } catch (Exception e) {
            return false;
        }
    }

    private void handleEditSuppMsg(Long chatId) {
        userService.updateStatusByChatId(chatId, "WANT_UPDATE_MSG");
        util.sendMessageToUser(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

}
