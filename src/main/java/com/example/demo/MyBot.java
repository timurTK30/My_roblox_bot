package com.example.demo;

import com.example.demo.config.BotConfig;
import com.example.demo.domain.*;
import com.example.demo.dto.GameDto;
import com.example.demo.dto.SuportMassageDto;
import com.example.demo.dto.UserDto;
import com.example.demo.handlers.UserCommandsHandler;
import com.example.demo.handlers.service.CallbackService;
import com.example.demo.handlers.service.CommandService;
import com.example.demo.mapper.GameMapper;
import com.example.demo.mapper.SuportMassageMapper;
import com.example.demo.mapper.UserMapper;
import com.example.demo.service.CreatorService;
import com.example.demo.service.GameService;
import com.example.demo.service.QuestService;
import com.example.demo.service.UserService;
import com.example.demo.service.serviceImp.SupportMassageServiceImpl;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendAnimation;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.time.LocalDate;
import java.time.Period;
import java.util.*;
import java.util.stream.Collectors;

import static com.example.demo.domain.Commands.*;
import static com.example.demo.domain.QuestCommands.EDIT_QUEST;
import static com.example.demo.domain.UserStatus.WANT_UPDATE_MSG;

@Component
@Slf4j
@RequiredArgsConstructor
public class MyBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final CreatorService creatorService;
    private final GameService gameService;
    private final UserService userService;
    private final UserMapper userMapper;
    private final SupportMassageServiceImpl supportMassageServiceImpl;
    private final SuportMassageMapper suportMassageMapper;
    private final GameMapper gameMapper;
    private final QuestService questService;
    private final UserCommandsHandler userCH;
    private final CallbackService callbackService;
    private final CommandService commandService;

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            menuForUser(update.getMessage().getChatId());
            commandService.handleCommand(update.getMessage());
        }

        if (update.hasCallbackQuery()) {
            callbackService.handleCallback(update.getCallbackQuery());
        }
    }

    private void handleIncomingMessage(Message message) {
        String text = message.getText();
        Long chatId = message.getChatId();

        if (text.startsWith(START.getCmd())) {
            userCH.wellcome(chatId);
        } else if (text.startsWith(HELP.getCmd())) {
            help(chatId);
        } else if (text.equalsIgnoreCase(GAMES.getCmd())) {
            handleGameCommand(chatId);
        } else if (text.startsWith(GAME.getCmd())) {
            Long gameId = Long.valueOf(text.replaceAll("\\D+", ""));
            getGameById(chatId, gameId);
        } else if (text.startsWith(BUY_SUBSCRIBE.getCmd())) {
            subscription(chatId);
        } else if (text.startsWith(PROFILE.getCmd())) {
            getProfile(chatId);
        } else if (text.startsWith(MENU.getCmd())) {
            getMenuByRole(chatId);
        } else if (text.startsWith(QUEST_BY_ID.getCmd())) {
            Long id = Long.valueOf(text.replaceAll("/quest", ""));
            Optional<Quest> questById = questService.getQuestById(id);
            outputQuestWithCustomBtn(chatId, questById.get(), List.of("–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç"));
        } else if (isUserAdmin(chatId)) {
            if (text.startsWith(STATISTISC.getCmd())) {
                statistics(chatId);
            } else if (text.startsWith(RESTART.getCmd())) {
                restart(chatId);
            } else if (text.startsWith(SET_ROLE.getCmd())) {
                requestToChangeRole(text, chatId);
            } else if (text.startsWith(READ_SUPP_MSG.getCmd())) {
                readSuppMsg(chatId);
            } else {
                handleAdminMessage(chatId, text);
            }
        } else {
            handleUserMessage(chatId, text);
        }

    }

    private void getMenuByRole(Long chatId) {
        if (isUserAdmin(chatId)) {
            menuForAdmin(chatId);
        } else {
            menuForUser(chatId);
        }
    }

    private void getProfile(Long chatId) {
        UserDto userByChatId = userService.getUserByChatId(chatId);
        Quest quest = userByChatId.getExecutiveQuest();
        Game game = userByChatId.getGame();
        StringBuilder information = new StringBuilder();
        information.append("üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n")
                .append("üìõ <b>–ò–º—è:</b> ").append(userByChatId.getNickname()).append("\n")
                .append("üíº <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ").append(userByChatId.getRole()).append("\n\n");

        if (game != null) {
            information.append("üéÆ <b>–ò–≥—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å –∫–µ–º-—Ç–æ:</b> \n")
                    .append(game.getName()).append(" [–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É](/game").append(game.getId()).append(")\n\n");
        }

        information.append("üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ").append(userByChatId.getDateOfRegisterAcc()).append("\n")
                .append("‚è≥ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</b> ")
                .append(Period.between(userByChatId.getDateOfRegisterAcc(), LocalDate.now()).getDays()).append(" –¥–Ω–µ–π\n\n")
                .append("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:</b> \n")
                .append("    ‚Ä¢ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º, —Ç–∞–∫–∏–º –∫–∞–∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.\n")
                .append("    ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n")
                .append("    ‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!\n\n")
                .append("<b>–ü—Ä–∏–Ω—è—Ç—ã–π –∫–≤–µ—Å—Ç:</b>\n")
                .append(quest.getGame().getName())
                .append("(/quest").append(quest.getId()).append(" )")
                .append("\n\n")
                .append("üí¨ <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: /help");

        sendMessageToUser(chatId, information.toString());
    }

    private void requestToChangeRole(String text, Long chatId) {
        Long chatIdUserForChange = Long.valueOf(text.replaceAll("\\D+", ""));
        sendMessageToUser(chatId, "–•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—å?",
                List.of(Role.ADMIN.name(), Role.PREMIUM_USER.name(), Role.USER.name()),
                List.of("change_role_admin_" + chatIdUserForChange,
                        "change_role_premium_" + chatIdUserForChange,
                        "change_role_user_" + chatIdUserForChange), 2);
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();
        System.out.println(data);


        switch (data) {
            case "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ\uD83D\uDC7E":
                register(chatId, callbackQuery);
                getMenuByRole(chatId);
                break;
            case "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É":
                handleAdminMessage(chatId, callbackQuery.getMessage().getMessageId());
                break;
            case "üòÄ":
                handlePositiveFeedback(chatId);
                break;
            case "üò°":
                handleNegativeFeedback(chatId, callbackQuery);
                break;
            case "ALL":
                readGames(chatId, null, callbackQuery.getMessage().getMessageId());
                break;
            case "HORROR":
            case "ADVENTURE":
            case "SHOOTER":
            case "TYCOON":
            case "SURVIVAL":
                readGames(chatId, GameGenre.valueOf(data), callbackQuery.getMessage().getMessageId());
                break;
            case "\uD83D\uDC81–ü–æ–º–æ—à—å":
                help(chatId);
                break;
            case "üéÆ–ò–≥—Ä—ã":
                handleGameCommand(chatId);
                break;
            case "üì®–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏":
                subscription(chatId);
                break;
            case "‚ÑπÔ∏è–ü—Ä–æ—Ñ–∏–ª—å":
                getProfile(chatId);
                break;
            case "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞":
                readSuppMsg(chatId);
                break;
            case "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞":
                restart(chatId);
                break;
            case "\uD83D\uDCCA –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞":
                statistics(chatId);
                break;
            case "‚úâ\uFE0F –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
                sendMessageToUser(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ");
                userService.updateAdminStatusByChatId(chatId, AdminStatus.NOTIFY_ALL_USERS, 0L);
                break;
            case "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã":
                readAllQuestsForAdmin(chatId);
                break;
            case "–ö–≤–µ—Å—Ç –º–µ–Ω—é":
                menuForCreateQuest(chatId);
                break;
            case "–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç":
                //TODO –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –º–µ—Ç–æ–¥
                Quest quest = new Quest();
                UserDto userByChatId = userService.getUserByChatId(chatId);
                quest.setCreatorOfQuest(userMapper.toEntity(userByChatId));
                quest.setDeprecated(false);
                questService.save(quest);

                Quest lastQuest = getLastQuest();
                outputQuestForAdmin(chatId, lastQuest);
                break;
            case "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–∏–µ –∫–≤–µ—Å—Ç—ã":
                deleteDeprecatedQuest(chatId);
                break;
            case "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã":
                List<GameDto> gameDtos = gameService.readAll();
                StringBuilder stringBuilder = new StringBuilder();
                gameDtos.forEach(gameDto -> {
                    stringBuilder.append(gameDto.getName())
                            .append(" ( /game").append(gameDto.getId()).append(" )")
                            .append("\n");
                });
                sendMessageToUser(chatId, stringBuilder.toString());
                break;
            case "–ö–≤–µ—Å—Ç—ã":
                sendMessageToUser(chatId, "–ö–∞–∫–∞—è –±—É–¥–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è?", List.of("–í—Å–µ –∫–≤–µ—Å—Ç—ã", "–ü–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–∞—Ö"), 2);
                break;
            case "–í—Å–µ –∫–≤–µ—Å—Ç—ã": {
                List<Quest> questList = questService.readAll().stream()
                        .filter(q -> !q.isDeprecated() && checkListForNulls(q))
                        .toList();
                if (questList.isEmpty()) {
                    sendMessageToUser(chatId, "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤");
                    break;
                }
                questList.forEach(existQuest -> {
                    outputQuestWithCustomBtn(chatId, existQuest, List.of("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç", "–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç"), List.of("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç " + existQuest.getId(), "–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç " + existQuest.getId()));
                });

                break;
            }
            case "–ü–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–∞—Ö":
                List<Quest> questList = questService.readAll().stream()
                        .filter(this::checkListForNulls)
                        .filter(q -> !q.isDeprecated())
                        .toList();
                List<Game> gameList = questList.stream()
                        .map(Quest::getGame)
                        .toList();
                List<String> uniqueGameNames = gameList.stream()
                        .map(Game::getName)
                        .distinct()
                        .toList();
                List<String> callBack = questList.stream()
                        .map(tempQuest -> String.join("_", tempQuest.getGame().getName(), "quest", tempQuest.getId().toString()))
                        .toList();

                if (uniqueGameNames.isEmpty()) {
                    sendMessageToUser(chatId, "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤");
                    break;
                }
                sendMessageToUser(chatId, "–í–∏–±–∏—Ä–∏—Ç–µ –∏–≥—Ä—É:", uniqueGameNames, callBack, uniqueGameNames.size() / 2);
                break;
            default:
                if (data.startsWith("User")) {
                    handleUserReplyRequest(chatId, data);
                } else if (data.startsWith("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É")) {
                    handleGameApplication(chatId, data);
                } else if (data.startsWith("–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π")) {
                    showFriends(chatId, data);
                } else if (data.startsWith("–û—Å—Ç–∞–≤–∏—Ç—å")) {
                    sendMessageToUser(chatId, "–†–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –Ω–æ –∫—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É");
                } else if (data.startsWith("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")) {
                    handleEditSuppMsg(chatId);
                } else if (data.startsWith("–ö—É–ø–∏—Ç—å")) {
                    requestToBuySub(callbackQuery, data, chatId);
                } else if (data.startsWith(Role.ADMIN.name()) ||
                        data.startsWith(Role.USER.name()) ||
                        data.startsWith(Role.PREMIUM_USER.name())) {
                    updateRole(data, chatId);
                } else if (data.startsWith(QuestCommands.ADD_DECRIPCION_FOR_QUEST.getCmdName())) {
                    sendMessageToUser(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ");
                    userService.updateAdminStatusByChatId(chatId, AdminStatus.CHANGE_DESCRIPTION_QUEST, 0L);
                } else if (data.startsWith(QuestCommands.ADD_REWARD_FOR_QUEST.getCmdName())) {
                    sendMessageToUser(chatId, "–í–≤–∏–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É: ");
                    userService.updateAdminStatusByChatId(chatId, AdminStatus.CHANGE_REWARD_QUEST, 0L);
                } else if (data.startsWith(QuestCommands.ADD_GAME_FOR_QUEST.getCmdName())) {
                    sendMessageToUser(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ", List.of("–ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã"), 1);
                    userService.updateAdminStatusByChatId(chatId, AdminStatus.CHANGE_GAME_QUEST, 0L);
                } else if (data.contains("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞")) {
                    //TODO —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—è–ª–æ—Å—å –Ω–∞ –Ω–æ–≤–æ–µ , editMSG
                    Quest existQuest = getQuestByIdFromCallback(chatId, data);
                    existQuest.setDeprecated(data.endsWith("‚ùå"));

                    questService.updateById(existQuest.getId(), existQuest);
                } else if (data.contains(EDIT_QUEST.getCmdName())) {
                    Quest existQuest = getQuestByIdFromCallback(chatId, data);
                    outputQuestForAdmin(chatId, existQuest);

                } else if (data.startsWith("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç")) {
                    Long questId = Long.valueOf(data.replaceAll("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç", "").trim());
                    Quest executiveQuest = userService.getUserByChatId(chatId).getExecutiveQuest();

                    String msg = "–ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç";
                    if (executiveQuest != null) {
                        msg = "–í–∞—à –ø—Ä–æ—à–ª—ã–π –∫–≤–µ—Å—Ç (/quest" + executiveQuest.getId() + ") –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω";
                    }
                    Quest questById = questService.getQuestById(questId).get();
                    UserDto userForUpdate = userService.getUserByChatId(chatId);
                    userForUpdate.setExecutiveQuest(questById);
                    userService.updateByChatId(userForUpdate, chatId);
                    sendMessageToUser(chatId, msg);

                } else if (data.contains("_quest_")) {
                    String[] splitData = data.split("_");
                    Long questId = Long.valueOf(splitData[splitData.length - 1]);
                    Quest questById = questService.getQuestById(questId).get();
                    outputQuestWithCustomBtn(chatId, questById, List.of("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç", "–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç"), List.of("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç " + questId, "–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç " + questId));
                } else if (data.startsWith("–û—Ç–º–µ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç")) {
                    UserDto userForDeleteQuest = userService.getUserByChatId(chatId);
                    userForDeleteQuest.setExecutiveQuest(null);
                    userService.updateByChatId(userForDeleteQuest, chatId);
                    sendMessageToUser(chatId, "–ö–≤–µ—Å—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω");

                }
                break;
        }
    }

    private void readAllQuestsForAdmin(Long chatId) {
        List<Quest> questList = questService.readAll();

        if (questList.isEmpty()) {
            sendMessageToUser(chatId, "–ö–≤–µ—Å—Ç–æ–≤ –Ω–µ—Ç");
            return;
        }
        questList.forEach(quest -> {
            String btn1 = quest.isDeprecated() ? quest.getId() + " –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ ‚úÖ" : quest.getId() + " –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ ‚ùå";
            String btn2 = quest.getId() + " " + EDIT_QUEST.getCmdName();
            outputQuestWithCustomBtn(chatId, quest, List.of(btn1, btn2));
        });

    }

    private boolean checkListForNulls(Quest quest) {
        return ObjectUtils.allNotNull(
                quest.getId(), quest.getReward(), quest.getGame()
        );
    }

    private Quest getQuestByIdFromCallback(Long chatId, String data) {
        Long id = Long.valueOf(data.substring(0, data.indexOf(" ")));
        Optional<Quest> questById = questService.getQuestById(id);

        if (questById.isEmpty()) {
            sendMessageToUser(chatId, "–¢–∞–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –Ω–µ—Ç");
            throw new NullPointerException("name method -> getQuestByIdFromCallback <- name method return null");
        }

        return questById.get();
    }

    private void deleteDeprecatedQuest(Long chatId) {
        List<Quest> quests = questService.readAll();
        for (Quest q : quests) {
            if (q.isDeprecated()) {
                questService.deleteById(q.getId());
                sendMessageToUser(chatId, "–ö–≤–µ—Å—Ç —Å id " + q.getId() + " –±–∏–ª —É–¥–∞–ª–µ–Ω");
            }
        }
    }

    private Quest getLastQuest() {
        List<Quest> questList = questService.readAll();
        Quest lastQuest = questList.get(questList.size() - 1);
        return lastQuest;
    }

    private void statistics(Long chatId) {
        List<UserDto> userDtos = userService.readAll();
        List<SuportMassageDto> massageDtos = supportMassageServiceImpl.readAll();
        Commands[] commands = values();
        long amountOfSuppMsg = massageDtos.size();
        long amountOfUsers = userDtos.stream().filter(user -> !user.getRole().equalsIgnoreCase(Role.ADMIN.name())).count();
        long amountOfAdmins = userDtos.stream().filter(user -> user.getRole().equalsIgnoreCase(Role.ADMIN.name())).count();
        long amountOfCommands = commands.length;

        sendMessageToUser(chatId, "–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:\n" +
                "\n" +
                "1. <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: </b> " + amountOfUsers + " \uD83D\uDCC8\n" +
                "2. <b>–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: </b> " + amountOfAdmins + "\uD83D\uDC69\u200D\uD83D\uDCBC\uD83D\uDC68\u200D\uD83D\uDCBC\n" +
                "3. <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: </b> " + amountOfSuppMsg + " \uD83D\uDCAC\n" +
                "4. <b>–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: </b> " + amountOfCommands + "\uD83D\uDEE0");
    }

    private void restart(Long chatId) {
        sendPhotoToUser(chatId, "C:\\project_java\\My_roblox_bot_new\\src\\main\\resources\\img\\fatalError.jpg", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞", List.of("Bye bye"), 1);
        System.exit(0);
    }

    private void menuForUser(Long chatId) {
        List<String> commandsList = Arrays.stream(values()).toList().stream().filter(cmd -> !cmd.isCmdAdmin() && cmd.isNeedToShow()).map(Commands::getCmdName).toList();
        List<String> callback = removeSignAndEnglishLetter(commandsList);
        sendMessageToUser(chatId, "<b>\uD83C\uDFAE Roblox –ë–æ—Ç ‚Äî –í–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ Roblox!</b>\n" +
                        "\n" +
                        "\uD83D\uDC4B –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–≥—Ä—ã –≤ Roblox. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:",
                commandsList, callback , commandsList.size() / 2);

    }

    private List<String> removeSignAndEnglishLetter(List<String> commandsList) {
        return commandsList.stream()
                .map(command -> command.replaceAll("[^–∞-—è–ê-–Ø—ë–Å\\s]", "").trim()).toList();
    }

    private void menuForAdmin(Long chatId) {
        List<String> commandsList = Arrays.stream(values()).toList().stream()
                .filter(commands -> !commands.isQuest())
                .filter(Commands::isCmdAdmin)
                .map(Commands::getCmdName)
                .toList();
        List<String> callback = removeSignAndEnglishLetter(commandsList);
        sendMessageToUser(chatId, "\uD83D\uDC4B –ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤. –í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–≥—Ä—É–∂–∞–π—Å—è –≤ –æ–±—É—á–µ–Ω–∏–µ:\n" +
                        "\n" +
                        "‚öô\uFE0F <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º </b>\n" +
                        "\n" +
                        "\uD83D\uDD04 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/restart) \n" +
                        "\uD83D\uDEE0 –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã\n" +
                        "\uD83D\uDCCA –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (/statistics)\n" +
                        "\n" +
                        "\uD83C\uDFAE <b>–ò–≥—Ä–æ–≤—ã–µ –ó–∞–¥–∞–Ω–∏—è</b>\n" +
                        "\n" +
                        "\uD83C\uDFAF –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n" +
                        "‚úè\uFE0F –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è\n" +
                        "\uD83C\uDFC6 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É—á—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤\n" +
                        "\n" +
                        "\uD83D\uDCDA <b>–ö–≤–µ—Å—Ç—ã</b>\n" +
                        "\n" +
                        "\uD83D\uDCA1 –î–æ–±–∞–≤–∏—Ç—å –æ–±—É—á–∞—é—â–∏–π –∫–≤–µ—Å—Ç\n" +
                        "‚ùì –°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π\n" +
                        "\n" +
                        "\uD83C\uDFC5 <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ù–∞–≥—Ä–∞–¥—ã</b>\n" +
                        "\n" +
                        "\uD83C\uDF81 –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n" +
                        "\uD83D\uDCCA –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–æ–≤\n" +
                        "\n" +
                        "\uD83D\uDCCA <b>–û—Ç—á–µ—Ç—ã</b>\n" +
                        "\n" +
                        "\uD83D\uDD0E –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏ –∏ –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤\n" +
                        "\uD83D\uDCDD –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—è–º\n" +
                        "\n" +
                        "\uD83D\uDCE2 <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n" +
                        "\n" +
                        "‚úâ\uFE0F –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º(/notifyAllUsers)\n" +
                        "\uD83D\uDD14 –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
                        "\n" +
                        "\uD83D\uDCBC <b>–î—Ä—É–≥–æ–µ</b>\n" +
                        "\n" +
                        "\uD83D\uDCC5 –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n" +
                        "\uD83D\uDCBE –°–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n" +
                        "\uD83D\uDCD6 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞",
                commandsList, callback, commandsList.size() / 2);
    }

    private void menuForCreateQuest(Long chatId) {
        List<String> commandsList = Arrays.stream(values()).toList().stream()
                .filter(Commands::isQuest)
                .map(Commands::getCmdName)
                .toList();
        List<String> callback = removeSignAndEnglishLetter(commandsList);
        sendMessageToUser(chatId, "–í —ç—Ç–æ–º —Å–ø–µ—Ü–µ–ª—å–Ω–æ–º –º–µ–Ω—é —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–≤–µ—Å—Ç—ã", commandsList, callback, commandsList.size() / 2);
    }

    private void requestToBuySub(CallbackQuery callbackQuery, String data, Long chatId) {
        String sub = data.replaceAll("–ö—É–ø–∏—Ç—å:", "");
        UserDto userByChatId = userService.getUserByChatId(chatId);
        sendMessageToUser(1622241974L, "–ò–º—è: " + callbackQuery.getFrom().getFirstName() + "\n" +
                "–ü–æ–¥–ø–∏—Å–∫–∞: " + userByChatId.getRole() + "\n" +
                "–•–æ—á–µ—Ç –∫—É–ø–∏—Ç—å: " + sub + "\n" +
                "–î–ª—è —Å–≤—è–∑–∏: @" + userByChatId.getNickname() + "\n" +
                "/set_role" + userByChatId.getChatId());
    }

    private void updateRole(String data, Long chatId) {
        Long chatIdSelectedUser = Long.valueOf(data.replaceAll("\\D", ""));
        String chooseRole = data.replaceAll("\\d", "").trim();
        UserDto userByChatId = userService.updateRoleByChatId(chatIdSelectedUser, chooseRole);
        sendMessageToUser(chatId, "–†–æ–ª—å —É: " + userByChatId.getNickname() + " –Ω–∞ " + userByChatId.getRole());
        sendMessageToUser(chatIdSelectedUser, "–í–∞–º –æ–±–Ω–æ–≤–∏–ª–∏ —Ä–æ–ª—å –Ω–∞: " + userByChatId.getRole());
    }

    private void outputQuestForAdmin(Long chatId, Quest quest) {
        String status = quest.isDeprecated() ? "‚ùå –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π" : "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π";
        String gameName = quest.getGame() != null ? quest.getGame().getName() : "–Ω–µ—Ç –∏–≥—Ä—ã";
        String format = String.format(
                "üéÆ <b>–ö–≤–µ—Å—Ç –¥–ª—è –∏–≥—Ä—ã:</b> %s \n\n" +
                        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:\n</b>%s\n\n" +
                        "üèÜ <b>–ù–∞–≥—Ä–∞–¥–∞:</b>\n%s\n\n" +
                        "üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–∞:</b>\n%s\n\n" +
                        "üìÖ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n%s",
                gameName,
                quest.getDescription(),
                quest.getReward(),
                quest.getCreatorOfQuest().getNickname(),
                status);

        List<String> commandsList = Arrays.stream(QuestCommands.values()).toList().stream()
                .filter(QuestCommands::isCreateNewQuest)
                .map(QuestCommands::getCmdName)
                .toList();
        List<String> callbacks = removeSignAndEnglishLetter(commandsList).stream()
                .map(callback -> callback.concat("_" + quest.getId())).toList();
        sendMessageToUser(chatId, format, commandsList, callbacks, commandsList.size());
    }

    private void outputQuestWithCustomBtn(Long chatId, Quest quest, List<String> btn, List<String> callBack) {
        String status = quest.isDeprecated() ? "‚ùå –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π" : "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π";
        String gameName = quest.getGame() != null ? quest.getGame().getName() : "–Ω–µ—Ç –∏–≥—Ä—ã";
        String format = String.format(
                "üéÆ <b>–ö–≤–µ—Å—Ç –¥–ª—è –∏–≥—Ä—ã:</b> %s \n\n" +
                        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:\n</b>%s\n\n" +
                        "üèÜ <b>–ù–∞–≥—Ä–∞–¥–∞:</b>\n%s\n\n" +
                        "üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç–∞:</b>\n%s\n\n" +
                        "üìÖ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n%s",
                gameName,
                quest.getDescription(),
                quest.getReward(),
                quest.getCreatorOfQuest().getNickname(),
                status);

        sendMessageToUser(chatId, format, btn, callBack, btn.size());
    }

    private void outputQuestWithCustomBtn(Long chatId, Quest quest, List<String> btn) {
        outputQuestWithCustomBtn(chatId, quest, btn, Collections.emptyList());
    }

    private void handleGameCommand(Long chatId) {
        GameGenre[] gameGenres = GameGenre.values();
        List<String> buttons = Arrays.stream(gameGenres)
                .map(Enum::toString)
                .collect(Collectors.toList());
        buttons.add("ALL");
        sendMessageToUser(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", buttons, buttons.size() / 2);
    }

    private void handleEditSuppMsg(Long chatId) {
        userService.updateStatusByChatId(chatId, "WANT_UPDATE_MSG");
        sendMessageToUser(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    private void handleAdminMessage(Long chatId, String message) {
        try {
            UserDto user = userService.getUserByChatId(chatId);
            if (user.getAStatus().equalsIgnoreCase(AdminStatus.NOTIFY_ALL_USERS.name())) {
                List<UserDto> userDtos = userService.readAll();
                for (UserDto u : userDtos) {
                    sendMessageToUser(u.getChatId(), message);
                }
                userService.updateAdminStatusByChatId(chatId, AdminStatus.DONT_WRITE, 0L);
            } else if (user.getAStatus().equalsIgnoreCase(AdminStatus.WANT_REPLY.name())) {
                sendMessageToUser(user.getTempChatIdForReply(), message, List.of("üòÄ", "üò°"), List.of("ok_reply", "bad_reply"), 1);
                userService.updateAdminStatusByChatId(chatId, AdminStatus.SENT, 0L);
            } else if (user.getAStatus().equalsIgnoreCase(AdminStatus.CHANGE_DESCRIPTION_QUEST.name())) {
                //TODO –∏—Å–ø—Ä–∞–≤–∏—Ç—å , —á—Ç–æ–±—ã –º—ã –≤ –º–µ—Ç–æ–¥–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–µ—Å—Ç —É–∫–∞–∑—ã–≤–∞–ª–∏ id
                Optional<Quest> questById = questService.getQuestById(getLastQuest().getId());
                Quest quest = questById.get();
                quest.setDescription(message);
                questService.updateById(getLastQuest().getId(), quest);
                userService.updateAdminStatusByChatId(chatId, AdminStatus.DONT_WRITE, 0L);

            } else if (user.getAStatus().equalsIgnoreCase(AdminStatus.CHANGE_REWARD_QUEST.name())) {
                Optional<Quest> questById = questService.getQuestById(getLastQuest().getId());
                Quest quest = questById.get();
                quest.setReward(message);
                questService.updateById(getLastQuest().getId(), quest);
                userService.updateAdminStatusByChatId(chatId, AdminStatus.DONT_WRITE, 0L);
            } else if (user.getAStatus().equalsIgnoreCase(AdminStatus.CHANGE_GAME_QUEST.name())) {
                Optional<Quest> questById = questService.getQuestById(getLastQuest().getId());
                Quest quest = questById.get();
                GameDto gameByName = gameService.getGameByName(message);
                if (gameByName == null) {
                    sendMessageToUser(chatId, "–î–∞–Ω–Ω–æ–π –∏–≥—Ä–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–ø–∏—Å–∞–ª–∏ –Ω–µ—Ç—É ü´§");
                    userService.updateAdminStatusByChatId(chatId, AdminStatus.DONT_WRITE, 0L);
                    return;
                }
                quest.setGame(gameMapper.toEntity(gameByName));
                questService.updateById(quest.getId(), quest);
                userService.updateAdminStatusByChatId(chatId, AdminStatus.DONT_WRITE, 0L);
            } else {
                handleUserMessage(chatId, message);
            }

        } catch (Exception e) {
            System.out.println("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π");
        }
    }

    private void handleUserMessage(Long chatId, String message) {
        try {
            UserDto user = userService.getUserByChatId(chatId);
            if (user.getStatus().equalsIgnoreCase(UserStatus.WAIT_FOR_SENT.name())) {
                if (saveSuppMassageFromUser(chatId, message)) {
                    sendMessageToUser(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                    userService.updateStatusByChatId(chatId, UserStatus.WAIT_FOR_REPLY.name());
                } else {
                    sendMessageToUser(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ–ø–æ–ª–∞–¥–∫–∏");
                }
            } else if (user.getStatus().equalsIgnoreCase(WANT_UPDATE_MSG.name())) {
                saveSuppMassageFromUser(chatId, message);
                sendMessageToUser(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
                userService.updateStatusByChatId(chatId, UserStatus.WAIT_FOR_REPLY.name());
            }
        } catch (Exception e) {
            System.out.println("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π");
        }
    }


    private void handleAdminMessage(Long chatId, Integer msgId) {
        if (!isSuppMsgExistByUserChatId(chatId)) {
            userService.updateStatusByChatId(chatId, "WAIT_FOR_SENT");
            editMsg(chatId, msgId, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        } else {
            SuportMassageDto supportMessage = supportMassageServiceImpl.getMassageByChatId(chatId).orElse(null);
            if (supportMessage != null) {
                editMsg(chatId, msgId, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: " + supportMessage.getMassage() + "\n–¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + supportMessage.getDate(),
                        List.of("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Å—Ç–∞–≤–∏—Ç—å"), 1);
            }
        }
    }

    private void handleUserReplyRequest(Long chatId, String data) {
        String chatIdWaitingUser = data.replaceAll("\\D", "");
        userService.updateAdminStatusByChatId(chatId, AdminStatus.WANT_REPLY, Long.valueOf(chatIdWaitingUser));
        sendMessageToUser(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (" + chatIdWaitingUser + ")");
    }

    private void handlePositiveFeedback(Long chatId) {
        supportMassageServiceImpl.deleteByChatId(chatId);
        userService.updateStatusByChatId(chatId, "DONT_SENT");
    }

    private void handleNegativeFeedback(Long chatId, CallbackQuery callbackQuery) {
        SuportMassageDto supportMessage = supportMassageServiceImpl.getMassageByChatId(chatId).orElse(null);
        if (supportMessage != null) {
            String message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @" + callbackQuery.getFrom().getUserName() +
                    " –Ω–µ –æ–¥–æ–±—Ä–∏–ª –ø–æ–º–æ—â—å\n\n" + supportMessage.getMassage();
            sendMessageToUser(1622241974L, message);
        }
    }

    private void handleGameApplication(Long chatId, String data) {
        String gameName = data.replaceAll("[^A-Za-z ]", "").trim();
        GameDto gameDto = gameService.getGameByName(gameName);
        UserDto userDto = userService.getUserByChatId(chatId);
        userDto.setGame(gameMapper.toEntity(gameDto));
        userService.updateByChatId(userDto, chatId);
    }

    private void showFriends(Long chatId, String data) {
        String gameName = data.replaceAll("[^A-Za-z ]", "").trim();
        GameDto gameByName = gameService.getGameByName(gameName);
        List<UserDto> friends = userService.getUserByGameId(gameByName.getId()).stream()
                .filter(user -> !user.getChatId().equals(chatId))
                .toList();
        if (!friends.isEmpty()) {
            sendMessageToUser(chatId, "@" + friends.get(0).getNickname());
            System.out.println(friends);
        } else {
            sendMessageToUser(chatId, "–ù–µ—Ç –¥—Ä—É–∑–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –≤ —ç—Ç—É –∏–≥—Ä—É");
        }
    }

    public void wellcome(Long chatId) {
        String text = "–ü—Ä–∏–≤–µ—Ç! \uD83D\uDE0A <b>–Ø –±–æ—Ç –ø–æ –∏–≥—Ä–µ Roblox.</b> \n" +
                "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ. \n" +
                "\n" +
                "–û—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –¥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π - <i>—è –∑–Ω–∞—é –≤—Å—ë!</i> –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ! \uD83C\uDFAE‚ú®\n" +
                "\n" +
                "–ê –µ—â—ë —è –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—é —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤. \n" +
                "\n" +
                "–¢–∞–∫ —á—Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —Å–ø—Ä–∞—à–∏–≤–∞–π –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!";
        sendMessageToUser(chatId, text, List.of("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ\uD83D\uDC7E"), List.of("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å"), 1);

    }

    public void subscription(Long chatId) {
        String msg = "\uD83D\uDCE2 –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–µ–º –±–æ—Ç–µ! \uD83C\uDF89\n" +
                "\n" +
                "‚ú® –ü—Ä–µ–º–∏—É–º 5z≈Ç ‚Äî –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! \uD83D\uDC8E\n" +
                "\n" +
                "\uD83D\uDC51 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 10z≈Ç ‚Äî –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. \uD83D\uDD27\n" +
                "\n" +
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! \uD83D\uDE80";
        sendMessageToUser(chatId, msg, List.of("–ö—É–ø–∏—Ç—å: –ü—Ä–µ–º–∏—É–º‚ú®", "–ö—É–ø–∏—Ç—å: –ê–¥–º–∏–Ω\uD83D\uDC51"),
                List.of("request_buy_premium", "request_buy_admin"), 2);
    }

    public void help(Long chatId) {
        sendMessageToUser(chatId, "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", List.of("–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"), 1);
    }

    public boolean isUserAdmin(Long chatId) {
        UserDto userByChatId = userService.getUserByChatId(chatId);
        return userByChatId.getRole().equalsIgnoreCase(Role.ADMIN.name());
    }

    public boolean isSuppMsgExistByUserChatId(Long chatId) {
        Optional<SuportMassageDto> massageByChatId = supportMassageServiceImpl.getMassageByChatId(chatId);
        return massageByChatId.isPresent();
    }

    //TODO –ø–æ—á–∏–Ω–∏—Ç—å –ø—É—Å—Ç–æ—Ç—É —Å—É–ø–æ—Ä—Ç –º—Å–≥
    public void readSuppMsg(Long chatId) {
        List<SuportMassageDto> massageDtos = supportMassageServiceImpl.readAll();
        List<String> buttonsUserId = massageDtos.stream().
                map(suppMsg -> suppMsg.getId().toString()).toList();
        List<String> callback = massageDtos.stream()
                .map(msg -> String.join("_", "user", msg.getChatId().toString()))
                .toList();
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < massageDtos.size(); i++) {
            stringBuilder.append(buttonsUserId.get(i))
                    .append(". ")
                    .append(massageDtos.get(i).getChatId())
                    .append(" ")
                    .append(massageDtos.get(i).getMassage()).append("\n");
        }
        sendMessageToUser(chatId, stringBuilder.toString(), buttonsUserId, callback, massageDtos.size());
    }

    public void getGameById(Long chatId, Long gameId) {
        StringBuilder stringBuilder = new StringBuilder();
        String tempCreatorId = "–ø—É—Å—Ç–æ";
        Optional<GameDto> gameByGameId = gameService.getGameByGameId(gameId);
        gameByGameId.ifPresent(gameDto -> {
            showAllDescription(stringBuilder, gameDto, tempCreatorId);
            if (gameDto.getGif() != null && !gameDto.getGif().isEmpty()) {
                sendGifToUser(chatId, gameDto.getGif(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            } else {
                sendPhotoToUser(chatId, gameDto.getPhoto(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            }

        });
    }

    public void readGames(Long chatId, GameGenre genre, Integer msgId) {

        deleteMsg(chatId, msgId);
        List<GameDto> gameByGenre;

        if (genre != null) {
            gameByGenre = gameService.getGameByGenre(genre);
        } else {
            gameByGenre = gameService.readAll();
        }
        if (gameByGenre.isEmpty()) {
            sendMessageToUser(chatId, "\uD83C\uDF1F –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –Ω–æ –∏–≥—Ä —Å —Ç–∞–∫–∏–º –∂–∞–Ω—Ä–æ–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç. \uD83C\uDF1F");
        }
        StringBuilder stringBuilder = new StringBuilder();
        //TODO
        String tempCreatorGroup = "–ø—É—Å—Ç–æ";
        for (int i = 0; i < gameByGenre.size(); i++) {
            GameDto gameDto = gameByGenre.get(i);
            showShortDescription(stringBuilder, i, gameDto, tempCreatorGroup);

            sendPhotoToUser(chatId, gameDto.getPhoto(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É", "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π"), List.of("leave_request_" + gameDto.getName(), "show_friends_" + gameDto.getName()), 1);
            stringBuilder.setLength(0);
        }
    }

    private void showShortDescription(StringBuilder stringBuilder, int i, GameDto gameDto, String tempCreatorGroup) {
        if (gameDto.getCreator() != null) {
            tempCreatorGroup = gameDto.getCreator().getNameOfGroup();
        }

        stringBuilder.append(i + 1)
                .append(". ")
                .append("<b>").append("\uD83C\uDF1F –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ")
                .append(gameDto.getName()).append("</b>")
                .append("( /game" + gameDto.getId() + " )")
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83C\uDFAE –ñ–∞–Ω—Ä: ").append("</b>")
                .append(gameDto.getGameGenre())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDCB0 –¶–µ–Ω–∞: ").append("</b>")
                .append(gameDto.getPrice())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDCBB A–∫—Ç–∏–≤: ").append("</b>")
                .append(gameDto.getActive());
    }

    private void showAllDescription(StringBuilder stringBuilder, GameDto gameDto, String tempCreatorGroup) {
        if (gameDto.getCreator() != null) {
            tempCreatorGroup = gameDto.getCreator().getNameOfGroup();
        }

        stringBuilder.append(1)
                .append(". ")
                .append("<b>").append("\uD83C\uDF1F –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ")
                .append(gameDto.getName()).append("</b>")
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDCD6 –û–ø–∏—Å–∞–Ω–∏–µ:").append("</b>")
                .append("\n")
                .append(gameDto.getDescription())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83C\uDFAE –ñ–∞–Ω—Ä: ").append("</b>")
                .append(gameDto.getGameGenre())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDCB0 –¶–µ–Ω–∞: ").append("</b>")
                .append(gameDto.getPrice())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDCBB A–∫—Ç–∏–≤: ").append("</b>")
                .append(gameDto.getActive())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83C\uDFE2 –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ").append("</b>")
                .append(tempCreatorGroup)
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDDD3 –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:").append("</b>")
                .append(gameDto.getCreateDate());
    }

    public boolean saveSuppMassageFromUser(Long chatId, String massage) {
        try {
            Optional<SuportMassageDto> massageByChatId = supportMassageServiceImpl.getMassageByChatId(chatId);
            if (massageByChatId.isEmpty()) {
                SuportMassageDto suportMassageDto = new SuportMassageDto();
                suportMassageDto.setChatId(chatId);
                suportMassageDto.setMassage(massage);
                suportMassageDto.setDate(new Date());
                supportMassageServiceImpl.save(suportMassageDto);
            } else {
                SuportMassageDto massageDto = massageByChatId.get();
                massageDto.setMassage(massage);
                massageDto.setDate(new Date());
                supportMassageServiceImpl.updateByChatId(massageDto, chatId);
            }
            return true;

        } catch (Exception e) {
            return false;
        }
    }

    public void register(Long chatId, CallbackQuery callbackQuery) {
        if (isUserExist(chatId)) {
            editMsg(chatId, callbackQuery.getMessage().getMessageId(), "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ\n" +
                    "\n" +
                    "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help \uD83C\uDD98\n" +
                    "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /games \uD83C\uDFAE");
            return;
        }
        var queryFrom = callbackQuery.getFrom();
        String nickname = !queryFrom.getUserName().isEmpty() ? queryFrom.getUserName() : queryFrom.getFirstName();

        User user = new User();
        user.setNickname(nickname);
        user.setChatId(chatId);
        user.setRole(Role.USER);
        user.setStatus(UserStatus.DONT_SENT);
        user.setAStatus(AdminStatus.DONT_WRITE);
        user.setTempChatIdForReply(0L);
        user.setDateOfRegisterAcc(LocalDate.now());
        userService.save(userMapper.toDto(user));
        editMsg(chatId, callbackQuery.getMessage().getMessageId(), "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ\n" +
                "\n" +
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help \uD83C\uDD98\n" +
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /games \uD83C\uDFAE");
    }

    public boolean isUserExist(Long chatId) {
        UserDto userByChatId = userService.getUserByChatId(chatId);
        return userByChatId != null;
    }

    public void sendGifToUser(Long chatId, String url, String massage, List<String> buttonText, int buttonRows) {
        SendAnimation sendAnimation = new SendAnimation();
        sendAnimation.setChatId(chatId);

        InputFile inputFile = new InputFile(new File(url));
        sendAnimation.setAnimation(inputFile);
        sendAnimation.setCaption(massage);
        sendAnimation.setParseMode("HTML");

        if (buttonText != null) {
            InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
            sendAnimation.setReplyMarkup(inlineKeyboardMarkup);
        }

        try {
            execute(sendAnimation);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendPhotoToUser(Long chatId, String url, String massage, List<String> buttonText,List<String> callbacks, int buttonRows) {
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(chatId);

        InputFile inputFile = new InputFile(new File(url));
        sendPhoto.setPhoto(inputFile);
        sendPhoto.setCaption(massage);
        sendPhoto.setParseMode("HTML");
        if (buttonText != null) {
            InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, callbacks, buttonRows);
            sendPhoto.setReplyMarkup(inlineKeyboardMarkup);
        }
        try {
            execute(sendPhoto);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    //TODO —Å–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    public void sendMessageToUser(Long chatId, String massage, List<String> buttonText, int buttonRows) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(massage);
        sendMessage.enableHtml(true);

        InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
        sendMessage.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendMessageToUser(Long chatId, String massage, List<String> buttonText, List<String> callBackQuery, int buttonRows) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(massage);
        sendMessage.enableHtml(true);

        InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, callBackQuery, buttonRows);
        sendMessage.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendMessageToUser(Long chatId, String massage) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(massage);
        sendMessage.enableHtml(true);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void editMsg(Long chatId, Integer msgId, String newText) {
        EditMessageText editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(msgId);
        editMessageText.setText(newText);

        try {
            execute(editMessageText);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void deleteMsg(Long chatId, Integer msgId) {
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(chatId);
        deleteMessage.setMessageId(msgId);

        try {
            execute(deleteMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void editMsg(Long chatId, Integer msgId, String newText, List<String> buttonText, int buttonRows) {
        EditMessageText editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(msgId);
        editMessageText.setText(newText);
        editMessageText.setParseMode("HTML");

        InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
        editMessageText.setReplyMarkup(inlineKeyboardMarkup);
        try {
            execute(editMessageText);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private InlineKeyboardMarkup createCustomKeyboard(List<String> buttonText, int rows) {

        return createCustomKeyboard(buttonText, Collections.emptyList(), rows);
    }

    private InlineKeyboardMarkup createCustomKeyboard(List<String> buttonText, List<String> callBackQuery, int rows) {
        if (buttonText.size() == 1) {
            rows = 1;
        }
        if (callBackQuery.isEmpty()) {
            callBackQuery = buttonText;
        }
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        int buttonsPerRow = (int) Math.ceil((double) buttonText.size() / rows);

        int buttonIndex = 0;
        for (int i = 0; i < rows; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (int j = 0; j < buttonsPerRow && buttonIndex < buttonText.size(); j++) {
                String text = buttonText.get(buttonIndex);
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(text);
                button.setCallbackData(callBackQuery.get(buttonIndex));
                row.add(button);
                buttonIndex++;
            }
            keyboard.add(row);
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }
}
