package com.example.demo;

import com.example.demo.config.BotConfig;
import com.example.demo.domain.*;
import com.example.demo.dto.GameDto;
import com.example.demo.dto.SuportMassageDto;
import com.example.demo.dto.UserDto;
import com.example.demo.mapper.GameMapper;
import com.example.demo.mapper.SuportMassageMapper;
import com.example.demo.mapper.UserMapper;
import com.example.demo.service.CreatorService;
import com.example.demo.service.GameService;
import com.example.demo.service.UserService;
import com.example.demo.service.serviceImp.SupportMassageServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendAnimation;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageMedia;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaPhoto;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.util.*;
import java.util.stream.Collectors;

import static com.example.demo.domain.Commands.*;
import static com.example.demo.domain.UserStatus.WANT_UPDATE_MSG;

@Component
@Slf4j
public class MyBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final CreatorService creatorService;
    private final GameService gameService;
    private final UserService userService;
    private final UserMapper userMapper;
    private final SupportMassageServiceImpl supportMassageServiceImpl;
    private final SuportMassageMapper suportMassageMapper;
    private final GameMapper gameMapper;

    @Autowired
    public MyBot(BotConfig botConfig, CreatorService creatorService, GameService gameService, UserService userService, UserMapper userMapper, SupportMassageServiceImpl supportMassageServiceImpl, SuportMassageMapper suportMassageMapper, GameMapper gameMapper) {
        this.botConfig = botConfig;
        this.creatorService = creatorService;
        this.gameService = gameService;
        this.userService = userService;
        this.userMapper = userMapper;
        this.supportMassageServiceImpl = supportMassageServiceImpl;
        this.suportMassageMapper = suportMassageMapper;
        this.gameMapper = gameMapper;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            handleIncomingMessage(update.getMessage());
        }

        if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleIncomingMessage(Message message) {
        String text = message.getText();
        Long chatId = message.getChatId();

        if (text.startsWith(START.getCmd())) {
            wellcome(chatId);
        } else if (text.startsWith(HELP.getCmd())) {
            help(chatId);
        } else if (text.startsWith(READ_SUPP_MSG.getCmd()) && isUserAdmin(chatId)) {
            readSuppMsg(chatId);
        } else if (text.equalsIgnoreCase(GAMES.getCmd())) {
            handleGameCommand(chatId);
        } else if (text.startsWith(GAME.getCmd())) {
            Long gameId = Long.valueOf(text.replaceAll("\\D+", ""));
            getGameById(chatId, gameId);
        } else if (text.startsWith(BUY_SUBSCRIBE.getCmd())) {
            subscription(chatId);
        } else if (text.startsWith(SET_ROLE.getCmd()) && isUserAdmin(chatId)) {
            Long chatIdUserForChange = Long.valueOf(text.replaceAll("\\D+",""));
            sendMessageToUser(chatId, "–•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—å?", List.of(Role.ADMIN.name(), Role.PREMIUM_USER.name(), Role.USER.name()), 2);
        } else {
            // TODO:–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º—Å , –≤—ã–≤–æ–¥–∏—Ç —Å–º—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ , –ø–æ—Ñ–∏—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–º—Å
            handleUserMessage(chatId, text);
        }

    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();


        switch (data) {
            case "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ\uD83D\uDC7E":
                register(chatId, callbackQuery);
                break;
            case "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É":
                handleAdminMessage(chatId, callbackQuery.getMessage().getMessageId());
                break;
            case "üòÄ":
                handlePositiveFeedback(chatId);
                break;
            case "üò°":
                handleNegativeFeedback(chatId, callbackQuery);
                break;
            case "ALL":
                readGames(chatId, null, callbackQuery.getMessage().getMessageId());
                break;
            case "HORROR":
            case "ADVENTURE":
            case "SHOOTER":
            case "TYCOON":
            case "SURVIVAL":
                readGames(chatId, GameGenre.valueOf(data), callbackQuery.getMessage().getMessageId());
                break;
            default:
                if (data.startsWith("User")) {
                    handleUserReplyRequest(chatId, data);
                } else if (data.startsWith("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É")) {
                    handleGameApplication(chatId, data);
                } else if (data.startsWith("–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π")) {
                    showFriends(chatId, data);
                } else if (data.startsWith("–û—Å—Ç–∞–≤–∏—Ç—å")) {
                    sendMessageToUser(chatId, "–†–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –Ω–æ –∫—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É");
                } else if (data.startsWith("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")) {
                    handleEditSuppMsg(chatId);
                } else if (data.startsWith("–ö—É–ø–∏—Ç—å")) {
                    String sub = data.replaceAll("–ö—É–ø–∏—Ç—å:", "");
                    UserDto userByChatId = userService.getUserByChatId(chatId);
                    sendMessageToUser(1622241974L ,"–ò–º—è: " + callbackQuery.getFrom().getFirstName() + "\n" +
                            "–ü–æ–¥–ø–∏—Å–∫–∞: " + userByChatId.getRole() + "\n" +
                            "–•–æ—á–µ—Ç –∫—É–ø–∏—Ç—å: " + sub + "\n" +
                            "–î–ª—è —Å–≤—è–∑–∏: @" + userByChatId.getNickname());
                }
                break;
        }
    }

    private void handleGameCommand(Long chatId) {
        GameGenre[] gameGenres = GameGenre.values();
        List<String> buttons = Arrays.stream(gameGenres)
                .map(Enum::toString)
                .collect(Collectors.toList());
        buttons.add("ALL");
        sendMessageToUser(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", buttons, buttons.size() / 2);
    }

    private void handleEditSuppMsg(Long chatId) {
        userService.updateStatusByChatId(chatId, "WANT_UPDATE_MSG");
        sendMessageToUser(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }

    private void handleUserMessage(Long chatId, String message) {
        try {
            UserDto user = userService.getUserByChatId(chatId);

            if (user.getStatus().equalsIgnoreCase("WAIT_FOR_SENT")) {
                if (saveSuppMassageFromUser(chatId, message)) {
                    sendMessageToUser(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                    userService.updateStatusByChatId(chatId, "WAIT_FOR_REPLY");
                } else {
                    sendMessageToUser(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ–ø–æ–ª–∞–¥–∫–∏");
                }
            } else if (user.getRole().equalsIgnoreCase("ADMIN") && user.getAStatus().equalsIgnoreCase("WANT_REPLY")) {
                sendMessageToUser(user.getTempChatIdForReply(), message, List.of("üòÄ", "üò°"), 1);
                userService.updateAdminStatusByChatId(chatId, AdminStatus.SENT, 0L);
            } else if (user.getStatus().equalsIgnoreCase(WANT_UPDATE_MSG.name())) {
                SuportMassageDto suportMassageDto = new SuportMassageDto();
                suportMassageDto.setMassage(message);
                suportMassageDto.setDate(new Date());
                supportMassageServiceImpl.updateByChatId(suportMassageDto, chatId);
                sendMessageToUser(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
            }
        } catch (Exception e) {
            System.out.println("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π");
        }
    }


    private void handleAdminMessage(Long chatId, Integer msgId) {
        if (!isSuppMsgExistByUserChatId(chatId)) {
            userService.updateStatusByChatId(chatId, "WAIT_FOR_SENT");
            editMsg(chatId, msgId, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        } else {
            SuportMassageDto supportMessage = supportMassageServiceImpl.getMassageByChatId(chatId).orElse(null);
            if (supportMessage != null) {
                editMsg(chatId, msgId, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: " + supportMessage.getMassage() + "\n–¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + supportMessage.getDate(),
                        List.of("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Å—Ç–∞–≤–∏—Ç—å"), 1);
            }
        }
    }

    private void handleUserReplyRequest(Long chatId, String data) {
        String chatIdWaitingUser = data.replaceAll("\\D", "");
        userService.updateAdminStatusByChatId(chatId, AdminStatus.WANT_REPLY, Long.valueOf(chatIdWaitingUser));
        sendMessageToUser(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (" + chatIdWaitingUser + ")");
    }

    private void handlePositiveFeedback(Long chatId) {
        supportMassageServiceImpl.deleteByChatId(chatId);
        userService.updateStatusByChatId(chatId, "DONT_SENT");
    }

    private void handleNegativeFeedback(Long chatId, CallbackQuery callbackQuery) {
        SuportMassageDto supportMessage = supportMassageServiceImpl.getMassageByChatId(chatId).orElse(null);
        if (supportMessage != null) {
            String message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @" + callbackQuery.getFrom().getUserName() +
                    " –Ω–µ –æ–¥–æ–±—Ä–∏–ª –ø–æ–º–æ—â—å\n\n" + supportMessage.getMassage();
            sendMessageToUser(1622241974L, message);
        }
    }

    private void handleGameApplication(Long chatId, String data) {
        String gameName = data.replaceAll("[^A-Za-z ]", "").trim();
        GameDto gameDto = gameService.getGameByName(gameName);
        UserDto userDto = userService.getUserByChatId(chatId);
        userDto.setGame(gameMapper.toEntity(gameDto));
        userService.updateByChatId(userDto, chatId);
    }

    private void showFriends(Long chatId, String data) {
        String gameName = data.replaceAll("[^A-Za-z ]", "").trim();
        GameDto gameByName = gameService.getGameByName(gameName);
        List<UserDto> friends = userService.getUserByGameId(gameByName.getId()).stream()
                .filter(user -> !user.getChatId().equals(chatId))
                .toList();
        if (!friends.isEmpty()) {
            sendMessageToUser(chatId, "@" + friends.get(0).getNickname());
            System.out.println(friends);
        } else {
            sendMessageToUser(chatId, "–ù–µ—Ç –¥—Ä—É–∑–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –≤ —ç—Ç—É –∏–≥—Ä—É");
        }
    }

    public void wellcome(Long chatId) {
        String text = "–ü—Ä–∏–≤–µ—Ç! \uD83D\uDE0A <b>–Ø –±–æ—Ç –ø–æ –∏–≥—Ä–µ Roblox.</b> \n" +
                "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ. \n" +
                "\n" +
                "–û—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –¥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π - <i>—è –∑–Ω–∞—é –≤—Å—ë!</i> –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ! \uD83C\uDFAE‚ú®\n" +
                "\n" +
                "–ê –µ—â—ë —è –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—é —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤. \n" +
                "\n" +
                "–¢–∞–∫ —á—Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —Å–ø—Ä–∞—à–∏–≤–∞–π –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!";
        sendMessageToUser(chatId, text, List.of("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ\uD83D\uDC7E"), 1);

    }

    public void subscription(Long chatId){
        String msg = "\uD83D\uDCE2 –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–µ–º –±–æ—Ç–µ! \uD83C\uDF89\n" +
                "\n" +
                "‚ú® –ü—Ä–µ–º–∏—É–º 5z≈Ç ‚Äî –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! \uD83D\uDC8E\n" +
                "\n" +
                "\uD83D\uDC51 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 10z≈Ç ‚Äî –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. \uD83D\uDD27\n" +
                "\n" +
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! \uD83D\uDE80";
        sendMessageToUser(chatId, msg, List.of("–ö—É–ø–∏—Ç—å: –ü—Ä–µ–º–∏—É–º‚ú®", "–ö—É–ø–∏—Ç—å: –ê–¥–º–∏–Ω\uD83D\uDC51"), 2);
    }

    public void help(Long chatId) {
        sendMessageToUser(chatId, "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", List.of("–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"), 1);
    }

    public boolean isUserAdmin(Long chatId) {
        UserDto userByChatId = userService.getUserByChatId(chatId);
        return userByChatId.getRole().equalsIgnoreCase("ADMIN");
    }

    public boolean isSuppMsgExistByUserChatId(Long chatId) {
        Optional<SuportMassageDto> massageByChatId = supportMassageServiceImpl.getMassageByChatId(chatId);
        return massageByChatId.isPresent();
    }

    //TODO –ø–æ—á–∏–Ω–∏—Ç—å –ø—É—Å—Ç–æ—Ç—É —Å—É–ø–æ—Ä—Ç –º—Å–≥
    public void readSuppMsg(Long chatId) {
        List<SuportMassageDto> massageDtos = supportMassageServiceImpl.readAll();
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < massageDtos.size(); i++) {
            stringBuilder.append(i + 1)
                    .append(". ")
                    .append(massageDtos.get(i).getChatId())
                    .append(" ")
                    .append(massageDtos.get(i).getMassage()).append("\n");
        }
        sendMessageToUser(chatId, stringBuilder.toString(), massageDtos.stream().
                map(suppMsg -> suportMassageMapper.toUserChatInfo(suppMsg).toString()).toList(), massageDtos.size());
    }

    public void getGameById(Long chatId, Long gameId) {
        StringBuilder stringBuilder = new StringBuilder();
        String tempCreatorId = "–ø—É—Å—Ç–æ";
        Optional<GameDto> gameByGameId = gameService.getGameByGameId(gameId);
        gameByGameId.ifPresent(gameDto -> {
            showAllDescription(stringBuilder, gameDto, tempCreatorId);
            if (gameDto.getGif() != null) {
                sendGifToUser(chatId, gameDto.getGif(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            } else {
                sendPhotoToUser(chatId, gameDto.getPhoto(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            }

        });
    }

    private void updateRole(Long chatId){

    }

    public void readGames(Long chatId, GameGenre genre, Integer msgId) {

        deleteMsg(chatId, msgId);
        List<GameDto> gameByGenre;

        if (genre != null) {
            gameByGenre = gameService.getGameByGenre(genre);
        } else {
            gameByGenre = gameService.readAll();
        }
        if (gameByGenre.isEmpty()) {
            sendMessageToUser(chatId, "\uD83C\uDF1F –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –Ω–æ –∏–≥—Ä —Å —Ç–∞–∫–∏–º –∂–∞–Ω—Ä–æ–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç. \uD83C\uDF1F");
        }
        StringBuilder stringBuilder = new StringBuilder();
        //TODO
        String tempCreatorGroup = "–ø—É—Å—Ç–æ";
        for (int i = 0; i < gameByGenre.size(); i++) {
            GameDto gameDto = gameByGenre.get(i);
            showShortDescription(stringBuilder, i, gameDto, tempCreatorGroup);

            sendPhotoToUser(chatId, gameDto.getPhoto(), stringBuilder.toString(), List.of("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤—É –¥–ª—è: " + gameDto.getName(), "–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –∏–≥—Ä—ã: " + gameDto.getName()), 1);
            stringBuilder.setLength(0);
        }
    }

    private void showShortDescription(StringBuilder stringBuilder, int i, GameDto gameDto, String tempCreatorGroup) {
        if (gameDto.getCreator() != null) {
            tempCreatorGroup = gameDto.getCreator().getNameOfGroup();
        }

        stringBuilder.append(i + 1)
                .append(". ")
                .append("<b>").append("\uD83C\uDF1F –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ")
                .append(gameDto.getName()).append("</b>")
                .append("( /game" + gameDto.getId() + " )")
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83C\uDFAE –ñ–∞–Ω—Ä: ").append("</b>")
                .append(gameDto.getGameGenre())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDCB0 –¶–µ–Ω–∞: ").append("</b>")
                .append(gameDto.getPrice())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDCBB A–∫—Ç–∏–≤: ").append("</b>")
                .append(gameDto.getActive());
    }

    private void showAllDescription(StringBuilder stringBuilder, GameDto gameDto, String tempCreatorGroup) {
        if (gameDto.getCreator() != null) {
            tempCreatorGroup = gameDto.getCreator().getNameOfGroup();
        }

        stringBuilder.append(1)
                .append(". ")
                .append("<b>").append("\uD83C\uDF1F –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ")
                .append(gameDto.getName()).append("</b>")
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDCD6 –û–ø–∏—Å–∞–Ω–∏–µ:").append("</b>")
                .append("\n")
                .append(gameDto.getDescription())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83C\uDFAE –ñ–∞–Ω—Ä: ").append("</b>")
                .append(gameDto.getGameGenre())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDCB0 –¶–µ–Ω–∞: ").append("</b>")
                .append(gameDto.getPrice())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDCBB A–∫—Ç–∏–≤: ").append("</b>")
                .append(gameDto.getActive())
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83C\uDFE2 –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ").append("</b>")
                .append(tempCreatorGroup)
                .append("\n")
                .append("\n")
                .append("<b>").append("\uD83D\uDDD3 –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:").append("</b>")
                .append(gameDto.getCreateDate());
    }

    public boolean saveSuppMassageFromUser(Long chatId, String massage) {
        try {
            Optional<SuportMassageDto> massageByChatId = supportMassageServiceImpl.getMassageByChatId(chatId);
            if (massageByChatId.isEmpty()) {
                SuportMassageDto suportMassageDto = new SuportMassageDto();
                suportMassageDto.setChatId(chatId);
                suportMassageDto.setMassage(massage);
                suportMassageDto.setDate(new Date());
                supportMassageServiceImpl.save(suportMassageDto);
            } else {
                SuportMassageDto massageDto = massageByChatId.get();
                massageDto.setMassage(massage);
                massageDto.setDate(new Date());
                supportMassageServiceImpl.updateByChatId(massageDto, chatId);
            }
            return true;

        } catch (Exception e) {
            return false;
        }
    }

    public void register(Long chatId, CallbackQuery callbackQuery) {
        if (isUserExist(chatId)) {
            editMsg(chatId, callbackQuery.getMessage().getMessageId(), "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ\n" +
                    "\n" +
                    "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help \uD83C\uDD98\n" +
                    "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /games \uD83C\uDFAE");
            return;
        }
        var queryFrom = callbackQuery.getFrom();
        String nickname = !queryFrom.getUserName().isEmpty() ? queryFrom.getUserName() : queryFrom.getFirstName();

        User user = new User();
        user.setNickname(nickname);
        user.setChatId(chatId);
        user.setRole(Role.USER);
        user.setStatus(UserStatus.DONT_SENT);
        user.setAStatus(AdminStatus.DONT_WRITE);
        user.setTempChatIdForReply(0L);
        userService.save(userMapper.toDto(user));
        editMsg(chatId, callbackQuery.getMessage().getMessageId(), "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ\n" +
                "\n" +
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help \uD83C\uDD98\n" +
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /games \uD83C\uDFAE");
    }

    public boolean isUserExist(Long chatId) {
        UserDto userByChatId = userService.getUserByChatId(chatId);
        return userByChatId != null;
    }

    public void sendGifToUser(Long chatId, String url, String massage, List<String> buttonText, int buttonRows) {
        SendAnimation sendAnimation = new SendAnimation();
        sendAnimation.setChatId(chatId);

        InputFile inputFile = new InputFile(new File(url));
        sendAnimation.setAnimation(inputFile);
        sendAnimation.setCaption(massage);
        sendAnimation.setParseMode("HTML");

        if (buttonText != null) {
            InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
            sendAnimation.setReplyMarkup(inlineKeyboardMarkup);
        }

        try {
            execute(sendAnimation);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendPhotoToUser(Long chatId, String url, String massage, List<String> buttonText, int buttonRows) {
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(chatId);

        InputFile inputFile = new InputFile(new File(url));
        sendPhoto.setPhoto(inputFile);
        sendPhoto.setCaption(massage);
        sendPhoto.setParseMode("HTML");
        if (buttonText != null) {
            InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
            sendPhoto.setReplyMarkup(inlineKeyboardMarkup);
        }
        try {
            execute(sendPhoto);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendMessageToUser(Long chatId, String massage, List<String> buttonText, int buttonRows) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(massage);
        sendMessage.enableHtml(true);

        InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
        sendMessage.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendMessageToUser(Long chatId, String massage) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(massage);
        sendMessage.enableHtml(true);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void editMsg(Long chatId, Integer msgId, String newText) {
        EditMessageText editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(msgId);
        editMessageText.setText(newText);

        try {
            execute(editMessageText);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void deleteMsg(Long chatId, Integer msgId){
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(chatId);
        deleteMessage.setMessageId(msgId);

        try {
            execute(deleteMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void editMsg(Long chatId, Integer msgId, String newText, List<String> buttonText, int buttonRows) {
        EditMessageText editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(msgId);
        editMessageText.setText(newText);
        editMessageText.setParseMode("HTML");

        InlineKeyboardMarkup inlineKeyboardMarkup = createCustomKeyboard(buttonText, buttonRows);
        editMessageText.setReplyMarkup(inlineKeyboardMarkup);
        try {
            execute(editMessageText);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private InlineKeyboardMarkup createCustomKeyboard(List<String> buttonText, int rows) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        int buttonsPerRow = (int) Math.ceil((double) buttonText.size() / rows);

        int buttonIndex = 0;
        for (int i = 0; i < rows; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (int j = 0; j < buttonsPerRow && buttonIndex < buttonText.size(); j++) {
                String text = buttonText.get(buttonIndex);
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(text);
                button.setCallbackData(text);
                row.add(button);
                buttonIndex++;
            }
            keyboard.add(row);
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }
}
